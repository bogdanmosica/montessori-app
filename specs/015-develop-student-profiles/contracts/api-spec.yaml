openapi: 3.0.3
info:
  title: Student Profiles & Observations API
  version: 1.0.0
  description: API endpoints for Teacher module student profile and observation management

paths:
  /api/teacher/students:
    get:
      summary: Get students assigned to authenticated teacher
      tags: [Students]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of assigned students
          content:
            application/json:
              schema:
                type: object
                properties:
                  students:
                    type: array
                    items:
                      $ref: '#/components/schemas/StudentSummary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/teacher/students/{studentId}:
    get:
      summary: Get detailed student profile
      tags: [Students]
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detailed student profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/teacher/students/{studentId}/observations:
    get:
      summary: Get observations for specific student
      tags: [Observations]
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Paginated list of observations
          content:
            application/json:
              schema:
                type: object
                properties:
                  observations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Observation'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: Create new observation for student
      tags: [Observations]
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateObservationRequest'
      responses:
        '201':
          description: Observation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/teacher/observations/{observationId}:
    put:
      summary: Update existing observation
      tags: [Observations]
      security:
        - bearerAuth: []
      parameters:
        - name: observationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateObservationRequest'
      responses:
        '200':
          description: Observation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    StudentSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date
        enrollmentStatus:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING]
        observationCount:
          type: integer
          minimum: 0
      required: [id, firstName, lastName, dateOfBirth, enrollmentStatus, observationCount]

    StudentProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date
        age:
          type: integer
          minimum: 0
        enrollment:
          $ref: '#/components/schemas/EnrollmentDetails'
        recentObservations:
          type: array
          items:
            $ref: '#/components/schemas/Observation'
          maxItems: 5
      required: [id, firstName, lastName, dateOfBirth, age, enrollment]

    EnrollmentDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING]
        enrollmentDate:
          type: string
          format: date
        program:
          type: string
      required: [id, status, enrollmentDate]

    Observation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        studentId:
          type: string
          format: uuid
        teacherId:
          type: string
          format: uuid
        teacherName:
          type: string
        note:
          type: string
          minLength: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, studentId, teacherId, teacherName, note, createdAt, updatedAt]

    CreateObservationRequest:
      type: object
      properties:
        note:
          type: string
          minLength: 1
          maxLength: 5000
      required: [note]

    UpdateObservationRequest:
      type: object
      properties:
        note:
          type: string
          minLength: 1
          maxLength: 5000
      required: [note]

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
      required: [page, limit, total, totalPages]

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
      required: [error, message]

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT